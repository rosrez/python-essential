@@
1. CONTAINER TYPES INDEXING

Subscripts of container obects in Python are zero based.

>>> list = [1,2,3,4,5,6,7,8,9,10]
>>> list[0]
1
>>> list[1]
2

@@
2. BASIC SLICING - ONE ELEMENT

Lets create a long list of values. We use a shothand form, like this:

>>> list[:] = range(100)
>>> list
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]

In the most basic form, a slice is a single subscript of a container object:

>>> list[27]
27

The type of the returned object is integer:

>>> type(list[27])
<class 'int'>

@@
3. RANGE SLICING - A LIST OF ELEMENTS

This creates a list with all elements from index 27 (inclusive) to index 42 (exclusive):

list[27:42]
[27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]

Ranges in Python are NOT INCLUSIVE, i.e. the upper bound is never included in a range.


@@
4. RANGE SLICING WITH A STEP

This gets every third element from the range [27;42) from our list:

>>> list[27:42:3]
[27, 30, 33, 36, 39]

Again, note the absense of 42 in the sequence. 42 is the upper bound for our range so it's excluded from it.

@@
5. SLICES CAN BE ASSIGNED TO

>>> list[27:43:3] = (99, 99, 99, 99, 99, 99)
>>> list[27:43]
[99, 28, 29, 99, 31, 32, 99, 34, 35, 99, 37, 38, 99, 40, 41, 99]
 ^^          ^^          ^^          ^^          ^^          ^^  --- NEW VALUES

